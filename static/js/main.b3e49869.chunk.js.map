{"version":3,"sources":["api/email.js","components/prayer/PrayerInput.js","components/prayer/PrayerSuccess.js","App.js","reportWebVitals.js","index.js"],"names":["sendEmail","message","axios","post","process","PrayerInput","props","React","useState","inputValue","setInputValue","e","a","keyCode","onProgress","target","value","onDone","console","log","className","style","display","isDone","type","disabled","inProgress","onKeyUp","onChange","placeholder","PrayerSuccess","onClick","App","setIsDone","setInProgress","hideWhenDone","showInProgress","src","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAEe,SAASA,EAAUC,GAChC,GAAKA,EAIL,OAAOC,IAAMC,KAAKC,iDAAyC,CACzDH,Y,WC4BWI,MAhCf,SAAqBC,GACnB,IAD0B,EAEUC,IAAMC,SAAS,IAFzB,mBAEnBC,EAFmB,KAEPC,EAFO,iDAQ1B,WAA4BC,GAA5B,SAAAC,EAAA,yDAPuB,KAQjBD,EAAEE,QADR,iEAMIP,EAAMQ,YAAW,GANrB,SAOUd,EAAUW,EAAEI,OAAOC,OAP7B,OAQIV,EAAMW,QAAO,GACbP,EAAc,IATlB,kDAWIQ,QAAQC,IAAR,MAXJ,QAcEb,EAAMQ,YAAW,GAdnB,2DAR0B,sBAyB1B,OACE,qBAAKM,UAAU,cAAcC,MAAO,CAACC,QAAShB,EAAMiB,OAAS,OAAS,SAAtE,SACE,uBAAOC,KAAK,OAAOC,SAAUnB,EAAMoB,WAAYC,QA3BzB,4CA2BgDP,UAAU,YAAYQ,SAvBhG,SAA2BjB,GACzBD,EAAcC,EAAEI,OAAOC,QAsBoGa,YAAY,gCAAgCb,MAAOP,O,MClBnKqB,MAXf,SAAuBxB,GAGrB,OACE,sBAAKc,UAAU,gBAAgBC,MAAO,CAACC,QAAShB,EAAMiB,OAAS,QAAU,QAAzE,UACE,4BAJY,oDAKZ,wBAAQC,KAAK,SAASO,QAAS,kBAAMzB,EAAMW,QAAO,IAAlD,6BCiBSe,MAnBf,WAAgB,IAAD,EACezB,IAAMC,UAAS,GAD9B,mBACNe,EADM,KACEU,EADF,OAEuB1B,IAAMC,UAAS,GAFtC,mBAENkB,EAFM,KAEMQ,EAFN,KAIPC,EAAeZ,EAAS,OAAS,QACjCa,EAAiBV,EAAa,QAAU,OAE9C,OACE,qBAAKN,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,MAAO,CAACC,QAASa,GAAeE,IAAKjC,4BAA6CgB,UAAU,WAAWkB,IAAI,SAChH,qBAAKjB,MAAO,CAACC,QAASc,GAAiBC,IAAKjC,8BAA+CkC,IAAI,WAC/F,cAAC,EAAD,CAAaf,OAAQA,EAAQN,OAAQgB,EAAWnB,WAAYoB,EAAeR,WAAYA,IACvF,cAAC,EAAD,CAAeH,OAAQA,EAAQN,OAAQgB,UCPhCM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b3e49869.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default function sendEmail(message) {\n  if (!message) {\n    return;\n  }\n\n  return axios.post(process.env.REACT_APP_EMAIL_SERVICE_URL, {\n    message\n  });\n}\n","import React from 'react';\n\nimport sendEmail from '../../api/email';\n\nfunction PrayerInput(props) {\n  const ENTER_KEY_CODE = 13;\n  const [inputValue, setInputValue] = React.useState('');\n\n  function handleInputChange(e) {\n    setInputValue(e.target.value);\n  }\n\n  async function handleSubmit(e) {\n    if (e.keyCode !== ENTER_KEY_CODE) {\n      return;\n    }\n\n    try {\n      props.onProgress(true);\n      await sendEmail(e.target.value)\n      props.onDone(true);\n      setInputValue('');\n    } catch (e) {\n      console.log(e);\n    }\n\n    props.onProgress(false);\n  }\n\n  return (\n    <div className=\"PrayerInput\" style={{display: props.isDone ? 'none' : 'block'}}>\n      <input type=\"text\" disabled={props.inProgress} onKeyUp={handleSubmit} className=\"App-input\" onChange={handleInputChange} placeholder=\"What do you want to pray for?\" value={inputValue} />\n    </div>\n  );\n}\n\nexport default PrayerInput;\n","import './PrayerSuccess.css';\n\nfunction PrayerSuccess(props) {\n  const message = 'Your Prayer has been submitted! God bless you! ';\n\n  return (\n    <div className=\"PrayerSuccess\" style={{display: props.isDone ? 'block' : 'none'}}>\n      <p>{message}</p>\n      <button type=\"button\" onClick={() => props.onDone(false)}>Another one</button>\n    </div>\n  );\n}\n\nexport default PrayerSuccess;\n","import React from 'react';\n\nimport './App.css';\nimport PrayerInput from './components/prayer/PrayerInput';\nimport PrayerSuccess from './components/prayer/PrayerSuccess';\n\nfunction App() {\n  const [isDone, setIsDone] = React.useState(false);\n  const [inProgress, setInProgress] = React.useState(false);\n\n  const hideWhenDone = isDone ? 'none' : 'block';\n  const showInProgress = inProgress ? 'block' : 'none';\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img style={{display: hideWhenDone}} src={process.env.PUBLIC_URL + '/images/logo.png'} className=\"App-logo\" alt=\"logo\" />\n        <img style={{display: showInProgress}} src={process.env.PUBLIC_URL + '/images/loader.gif'} alt=\"loader\" />\n        <PrayerInput isDone={isDone} onDone={setIsDone} onProgress={setInProgress} inProgress={inProgress} />\n        <PrayerSuccess isDone={isDone} onDone={setIsDone} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}